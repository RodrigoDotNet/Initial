// <auto-generated />
using System;
using Initial.Api.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Initial.Api.Migrations
{
    [DbContext(typeof(InitialDatabase))]
    [Migration("V1_0_20191020_2001")]
    partial class V1_0_20191020_2001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Initial.Api.Models.Database.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int?>("LastModifiedUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Initial.Api.Models.Database.AreaAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId");

                    b.Property<bool>("CanCreate");

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanModify");

                    b.Property<bool>("CanRead");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<int>("GroupId");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int?>("LastModifiedUserId");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("GroupId");

                    b.ToTable("AreaAccess");
                });

            modelBuilder.Entity("Initial.Api.Models.Database.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("EnterpriseId");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int?>("LastModifiedUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Initial.Api.Models.Database.Enterprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int?>("LastModifiedUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("PrivateId");

                    b.Property<Guid>("PublicId");

                    b.HasKey("Id");

                    b.ToTable("Enterprise");
                });

            modelBuilder.Entity("Initial.Api.Models.Database.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<int?>("EnterpriseId");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int?>("LastModifiedUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Initial.Api.Models.Database.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Exception");

                    b.Property<string>("Level")
                        .HasMaxLength(128);

                    b.Property<string>("Message");

                    b.Property<string>("MessageTemplate");

                    b.Property<string>("Properties");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Initial.Api.Models.Database.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int?>("LastModifiedUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("Initial.Api.Models.Database.PolicyAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<int>("GroupId");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int?>("LastModifiedUserId");

                    b.Property<int>("PolicyId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicyAccess");
                });

            modelBuilder.Entity("Initial.Api.Models.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("EnterpriseId");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int?>("LastModifiedUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("Password");

                    b.Property<Guid>("PrivateId");

                    b.Property<Guid>("PublicId");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Initial.Api.Models.Database.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CreationUserId");

                    b.Property<int>("GroupId");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int?>("LastModifiedUserId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("Initial.Api.Models.Database.AreaAccess", b =>
                {
                    b.HasOne("Initial.Api.Models.Database.Area", "Area")
                        .WithMany("AreaAccess")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Initial.Api.Models.Database.Group", "Group")
                        .WithMany("AreaAccess")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Initial.Api.Models.Database.Customer", b =>
                {
                    b.HasOne("Initial.Api.Models.Database.Enterprise", "Enterprise")
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Initial.Api.Models.Database.Group", b =>
                {
                    b.HasOne("Initial.Api.Models.Database.Enterprise", "Enterprise")
                        .WithMany("Groups")
                        .HasForeignKey("EnterpriseId");
                });

            modelBuilder.Entity("Initial.Api.Models.Database.Policy", b =>
                {
                    b.HasOne("Initial.Api.Models.Database.Area", "Area")
                        .WithMany("Policies")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Initial.Api.Models.Database.PolicyAccess", b =>
                {
                    b.HasOne("Initial.Api.Models.Database.Group", "Group")
                        .WithMany("PolicyAccess")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Initial.Api.Models.Database.Policy", "Policy")
                        .WithMany("PolicyAccess")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Initial.Api.Models.Database.User", b =>
                {
                    b.HasOne("Initial.Api.Models.Database.Enterprise", "Enterprise")
                        .WithMany("Users")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Initial.Api.Models.Database.UserGroup", b =>
                {
                    b.HasOne("Initial.Api.Models.Database.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Initial.Api.Models.Database.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
